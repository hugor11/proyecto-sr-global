// ============================================
// SCRIPT DE VALIDACI√ìN DEL MEN√ö M√ìVIL v16
// ============================================
// Copia y pega este c√≥digo en la consola del navegador
// con el men√∫ m√≥vil ABIERTO

console.log('=== VALIDACI√ìN FINAL DEL MEN√ö v16 ===\n');

const closeBtns = document.querySelectorAll('[data-menu-close]');
const timesIcons = document.querySelectorAll('.fa-times');
const panel = document.querySelector('[data-menu-panel]');
const overlay = document.querySelector('[data-menu-overlay]');

console.log('‚úÖ Botones cerrar:', closeBtns.length, closeBtns.length === 1 ? '‚úÖ (debe ser 1)' : '‚ùå (debe ser 1)');
console.log('‚úÖ √çconos fa-times:', timesIcons.length, timesIcons.length === 1 ? '‚úÖ (debe ser 1)' : '‚ùå (debe ser 1)');

if (panel) {
  const panelStyles = getComputedStyle(panel);
  const panelRect = panel.getBoundingClientRect();
  
  console.log('\n--- PANEL ---');
  console.log('‚úÖ Z-index:', panelStyles.zIndex, panelStyles.zIndex === '50' ? '‚úÖ (debe ser 50)' : '‚ùå (debe ser 50)');
  console.log('‚úÖ Position:', panelStyles.position, panelStyles.position === 'fixed' ? '‚úÖ (debe ser fixed)' : '‚ùå (debe ser fixed)');
  console.log('‚úÖ Atributo hidden:', panel.hasAttribute('hidden'), panel.hasAttribute('hidden') ? '‚ùå (debe ser false cuando est√° abierto)' : '‚úÖ (debe ser false)');
  console.log('‚úÖ Display:', panelStyles.display, panelStyles.display === 'none' ? '‚ùå (NO debe ser none)' : '‚úÖ');
  console.log('‚úÖ Dimensiones:', Math.round(panelRect.width), 'x', Math.round(panelRect.height), panelRect.width > 0 ? '‚úÖ' : '‚ùå');
  console.log('‚úÖ Clase md:hidden:', panel.classList.contains('md:hidden') ? '‚ùå (NO debe tener esta clase)' : '‚úÖ (correcto)');
} else {
  console.error('‚ùå Panel no encontrado');
}

if (overlay) {
  const overlayStyles = getComputedStyle(overlay);
  console.log('\n--- OVERLAY ---');
  console.log('‚úÖ Z-index:', overlayStyles.zIndex, overlayStyles.zIndex === '40' ? '‚úÖ (debe ser 40)' : '‚ùå (debe ser 40)');
  console.log('‚úÖ Clase hidden:', overlay.classList.contains('hidden'), '(debe ser false cuando men√∫ abierto)');
  console.log('‚úÖ Display:', overlayStyles.display, overlayStyles.display === 'none' ? '‚ùå (NO debe ser none)' : '‚úÖ');
} else {
  console.error('‚ùå Overlay no encontrado');
}

console.log('\n=== PRUEBA DE ENLACES ===');
const links = document.querySelectorAll('[data-menu-panel] a[href]');
console.log('‚úÖ Enlaces en el men√∫:', links.length);
if (links.length > 0) {
  console.log('Primer enlace:', links[0].href, '‚Üí', links[0].textContent.trim());
  console.log('üí° Haz clic en un enlace y verifica que aparezca el log: "üîó Navegando a: ..."');
}

console.log('\n=== BOT√ìN HAMBURGUESA ===');
const hamburger = document.querySelector('[data-menu-toggle]');
if (hamburger) {
  console.log('‚úÖ aria-expanded:', hamburger.getAttribute('aria-expanded'), '(debe ser "true" cuando est√° abierto)');
  console.log('‚úÖ aria-label:', hamburger.getAttribute('aria-label'));
} else {
  console.error('‚ùå Bot√≥n hamburguesa no encontrado');
}

console.log('\n=== FIN DE VALIDACI√ìN ===');
console.log('üìã CHECKLIST:');
console.log('  [ ] Solo 1 bot√≥n X visible');
console.log('  [ ] Solo 1 √≠cono fa-times');
console.log('  [ ] Panel z-index = 50');
console.log('  [ ] Panel position = fixed');
console.log('  [ ] Panel SIN atributo hidden');
console.log('  [ ] Panel SIN clase md:hidden');
console.log('  [ ] Panel visible con dimensiones correctas');
console.log('  [ ] Clic en enlace navega correctamente');
console.log('  [ ] Clic en X cierra el men√∫');
console.log('  [ ] Clic en overlay cierra el men√∫');
console.log('  [ ] Tecla Escape cierra el men√∫');
