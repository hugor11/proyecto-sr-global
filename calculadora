<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="robots" content="noindex, nofollow">
    <title>Calculadora de Comisiones Stripe MX</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Fuentes y estilos del sitio para alinear diseño -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Pacifico&family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="style.css">
    <style>
    body { font-family: 'Poppins', Arial, sans-serif; }
        .calculator-card {
            background-color: white;
            border-radius: 0.75rem;
            padding: 2rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease-in-out;
        }
        .calculator-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        .result-box {
            background-color: #f3f4f6;
            border-left: 4px solid #4f46e5;
        }

        /* Mobile-friendly inputs: avoid iOS zoom, hide spinners, larger tap targets */
        input[type=number], select {
            min-height: 44px; /* comfortable tap target */
        }
        input[type=number]::-webkit-outer-spin-button,
        input[type=number]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
    input[type=number] { appearance: textfield; -moz-appearance: textfield; }
        @media (max-width: 640px) {
            input[type=number],
            select,
            .calculator-card input,
            .calculator-card select {
                font-size: 16px; /* prevent auto-zoom on iOS */
            }
            .calculator-card { padding: 1.25rem; }
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen flex items-center justify-center p-4 font-poppins">

    <div class="container mx-auto max-w-4xl w-full">
        <header class="text-center mb-8">
            <h1 id="page-title" class="text-4xl font-bold text-brand-dark">Calculadora de Comisiones Stripe</h1>
            <p class="text-gray-600 mt-2">Estima tus cobros con tarjeta y meses sin intereses.</p>
            <div class="mt-3">
                <button id="adv-toggle" type="button" class="inline-flex items-center gap-2 text-sm border border-brand-turquoise text-brand-turquoise px-3 py-1.5 rounded-md hover:bg-brand-turquoise hover:text-white transition" aria-pressed="false" aria-expanded="false">
                    <span>Panel avanzado</span>
                    <svg id="adv-icon" class="w-4 h-4 transition-transform duration-200" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 111.06 1.06l-4.24 4.24a.75.75 0 01-1.06 0L5.21 8.29a.75.75 0 01.02-1.08z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>
        </header>

        <!-- Modo avanzado: ajustar comisiones -->
    <section id="advanced-panel" class="bg-white border-t-4 border-brand-turquoise rounded-2xl shadow p-4 md:p-6 mb-8 hidden">
            <div class="flex flex-col md:flex-row md:items-end gap-4">
                <div class="flex-1">
                    <label for="advStripePct" class="block text-sm font-medium text-gray-700">Comisión Stripe (%)</label>
                    <input type="number" id="advStripePct" value="3.6" min="0" step="0.01" inputmode="decimal" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brand-turquoise focus:border-brand-turquoise sm:text-sm">
                </div>
                <div class="flex-1">
                    <label for="advStripeFixed" class="block text-sm font-medium text-gray-700">Comisión fija (MXN)</label>
                    <input type="number" id="advStripeFixed" value="3.00" min="0" step="0.01" inputmode="decimal" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-brand-turquoise focus:border-brand-turquoise sm:text-sm">
                </div>
                <div class="md:w-auto">
                    <span class="inline-block bg-brand-orange text-white text-xs font-bold px-3 py-2 rounded-md">IVA 16% aplicado</span>
                </div>
            </div>
        </section>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">

            <!-- Calculadora 1: Cuánto voy a recibir -->
            <div class="calculator-card">
                <h2 class="text-2xl font-semibold text-gray-700 mb-6 text-center">¿Cuánto recibiré?</h2>
                
                <div class="space-y-4">
                    <div>
                        <label for="totalAmount" class="block text-sm font-medium text-gray-700">Monto a cobrar (MXN)</label>
                        <input type="number" id="totalAmount" placeholder="Ej: 1000" min="0" step="0.01" inputmode="decimal" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>

                    <div>
                        <label for="monthsToReceive" class="block text-sm font-medium text-gray-700">Meses sin intereses</label>
                        <select id="monthsToReceive" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                            <option value="0">Pago de contado</option>
                            <option value="3">3 meses</option>
                            <option value="6">6 meses</option>
                            <option value="9">9 meses</option>
                            <option value="12">12 meses</option>
                            <option value="18">18 meses</option>
                            <option value="24">24 meses</option>
                        </select>
                    </div>
                </div>

        <div id="resultToReceive" class="mt-6 p-4 rounded-lg result-box hidden">
                    <p class="text-sm text-gray-600">Recibirás neto:</p>
                    <p id="netAmount" class="text-2xl font-bold text-indigo-600"></p>
                    <div class="text-xs text-gray-500 mt-2 space-y-1">
            <p id="installmentsToReceive"></p>
                        <p id="stripeFeeToReceive"></p>
                        <p id="msiFeeToReceive"></p>
                        <p id="totalFeeToReceive"></p>
                    </div>
                </div>
            </div>

            <!-- Calculadora 2: Cuánto debo cobrar -->
            <div class="calculator-card">
                <h2 class="text-2xl font-semibold text-gray-700 mb-6 text-center">¿Cuánto debo cobrar?</h2>

                <div class="space-y-4">
                    <div>
                        <label for="desiredAmount" class="block text-sm font-medium text-gray-700">Monto que quiero recibir (MXN)</label>
                        <input type="number" id="desiredAmount" placeholder="Ej: 1000" min="0" step="0.01" inputmode="decimal" class="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>

                    <div>
                        <label for="monthsToCharge" class="block text-sm font-medium text-gray-700">Meses sin intereses</label>
                        <select id="monthsToCharge" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                            <option value="0">Pago de contado</option>
                            <option value="3">3 meses</option>
                            <option value="6">6 meses</option>
                            <option value="9">9 meses</option>
                            <option value="12">12 meses</option>
                            <option value="18">18 meses</option>
                            <option value="24">24 meses</option>
                        </select>
                    </div>
                </div>
                
        <div id="resultToCharge" class="mt-6 p-4 rounded-lg result-box hidden">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm text-gray-600">Debes cobrar al cliente:</p>
                            <p id="totalToCharge" class="text-2xl font-bold text-indigo-600"></p>
                        </div>
                        <div class="flex items-center gap-2">
                            <span id="roundedBadge" class="hidden text-xs bg-indigo-100 text-indigo-700 px-2 py-1 rounded">Redondeado</span>
                            <button id="roundCharge" type="button" class="text-xs bg-brand-turquoise text-white px-3 py-1.5 rounded-md hover:bg-opacity-90">Redondear al peso</button>
                        </div>
                    </div>
                     <div class="text-xs text-gray-500 mt-2 space-y-1">
            <p id="installmentsToCharge"></p>
                        <p id="stripeFeeToCharge"></p>
                        <p id="msiFeeToCharge"></p>
                        <p id="totalFeeToCharge"></p>
                    </div>
                </div>
            </div>
        </div>
        <footer class="text-center mt-8 text-sm text-gray-500">
            <p>Comisión base de Stripe: 3.6% + $3.00 MXN (+IVA). Las comisiones por MSI son adicionales.</p>
        </footer>
    </div>

    <!-- Acceso restringido: capa de contraseña (cliente) -->
    <div id="auth-overlay" class="fixed inset-0 bg-black/70 z-50 flex items-center justify-center hidden">
        <div class="bg-white rounded-xl p-6 w-11/12 max-w-sm shadow-xl">
            <h2 class="text-lg font-semibold text-gray-800">Acceso restringido</h2>
            <p class="text-sm text-gray-600 mt-1 mb-4">Ingresa la clave de acceso.</p>
            <input type="password" id="auth-pass" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="Clave">
            <button id="auth-btn" class="mt-3 w-full bg-brand-orange text-white rounded-md py-2 font-semibold hover:bg-opacity-90">Entrar</button>
            <p id="auth-error" class="hidden text-sm text-red-600 mt-2">Clave incorrecta</p>
            <p class="text-[11px] text-gray-400 mt-3">Consejo: usa protección del servidor (Basic Auth/Cloudflare Access) para seguridad real.</p>
        </div>
    </div>

    <script>
        // --- CONFIGURACIÓN DE COMISIONES ---
    const STRIPE_PERCENTAGE_FEE = 0.036; // 3.6% (default)
    const STRIPE_FIXED_FEE = 3.00; // $3.00 MXN (default)
        const IVA = 0.16; // 16% de IVA sobre la comisión

        const MSI_FEES = { // Comisiones adicionales por meses sin intereses
            0: 0,
            3: 0.05,   // 5%
            6: 0.075,  // 7.5%
            9: 0.10,   // 10%
            12: 0.125, // 12.5%
            18: 0.175, // 17.5%
            24: 0.225  // 22.5%
        };
        
        // --- ELEMENTOS DEL DOM ---
        const totalAmountInput = document.getElementById('totalAmount');
        const monthsToReceiveSelect = document.getElementById('monthsToReceive');
        const resultToReceiveDiv = document.getElementById('resultToReceive');
        const netAmountP = document.getElementById('netAmount');
    const installmentsToReceiveP = document.getElementById('installmentsToReceive');
        const stripeFeeToReceiveP = document.getElementById('stripeFeeToReceive');
        const msiFeeToReceiveP = document.getElementById('msiFeeToReceive');
        const totalFeeToReceiveP = document.getElementById('totalFeeToReceive');
    // const roundReceiveBtn = document.getElementById('roundReceive'); // removed

        const desiredAmountInput = document.getElementById('desiredAmount');
        const monthsToChargeSelect = document.getElementById('monthsToCharge');
        const resultToChargeDiv = document.getElementById('resultToCharge');
        const totalToChargeP = document.getElementById('totalToCharge');
    const installmentsToChargeP = document.getElementById('installmentsToCharge');
        const stripeFeeToChargeP = document.getElementById('stripeFeeToCharge');
        const msiFeeToChargeP = document.getElementById('msiFeeToCharge');
        const totalFeeToChargeP = document.getElementById('totalFeeToCharge');
    // const roundDesiredBtn = document.getElementById('roundDesired'); // removed
    const roundChargeBtn = document.getElementById('roundCharge');
    const roundedBadge = document.getElementById('roundedBadge');
    let lastChargeTotal = null; // guarda el último total calculado (antes de redondear)

        // Advanced controls
        const advStripePctInput = document.getElementById('advStripePct');
        const advStripeFixedInput = document.getElementById('advStripeFixed');

        function getStripePct(){
            const v = parseFloat(advStripePctInput?.value);
            return isFinite(v) && v >= 0 ? v/100 : STRIPE_PERCENTAGE_FEE;
        }
        function getStripeFixed(){
            const v = parseFloat(advStripeFixedInput?.value);
            return isFinite(v) && v >= 0 ? v : STRIPE_FIXED_FEE;
        }

        // --- LÓGICA DE CÁLCULO ---

        /**
         * Formatea un número como moneda mexicana.
         * @param {number} amount - La cantidad a formatear.
         * @returns {string} - La cantidad formateada.
         */
        function formatCurrency(amount) {
            return new Intl.NumberFormat('es-MX', {
                style: 'currency',
                currency: 'MXN'
            }).format(amount);
        }

        /**
         * Calcula cuánto se recibirá neto.
         */
        function calculateNetToReceive() {
            const totalAmount = parseFloat(totalAmountInput.value) || 0;
            const months = parseInt(monthsToReceiveSelect.value);
            
            if (totalAmount <= 0) {
                resultToReceiveDiv.classList.add('hidden');
                return;
            }

            // 1. Calcular comisión base de Stripe (porcentaje + fijo)
            const stripeBaseFee = (totalAmount * getStripePct()) + getStripeFixed();
            
            // 2. Calcular comisión por MSI
            const msiFee = totalAmount * MSI_FEES[months];

            // 3. Calcular IVA sobre ambas comisiones
            const totalCommissionBeforeIVA = stripeBaseFee + msiFee;
            const ivaOnCommission = totalCommissionBeforeIVA * IVA;

            // 4. Calcular comisión total y el neto
            const totalFee = totalCommissionBeforeIVA + ivaOnCommission;
            const netAmount = totalAmount - totalFee;

            // Mostrar resultados
            netAmountP.textContent = formatCurrency(netAmount);
            if (months > 0) {
                const monthly = totalAmount / months;
                installmentsToReceiveP.textContent = `Mensualidad estimada del cliente: ${formatCurrency(monthly)} x ${months} meses`;
            } else {
                installmentsToReceiveP.textContent = '';
            }
            stripeFeeToReceiveP.textContent = `Comisión Stripe: -${formatCurrency(stripeBaseFee + (stripeBaseFee * IVA))}`;
            msiFeeToReceiveP.textContent = `Comisión MSI: -${formatCurrency(msiFee + (msiFee * IVA))}`;
            totalFeeToReceiveP.textContent = `Comisión Total (IVA incl.): -${formatCurrency(totalFee)}`;
            resultToReceiveDiv.classList.remove('hidden');
        }

        /**
         * Calcula cuánto se debe cobrar para recibir una cantidad deseada.
         */
        function renderChargeFromTotal(totalToCharge, months){
            // Calcular las comisiones desglosadas basadas en el total a cobrar
            const stripeBaseFee = (totalToCharge * getStripePct()) + getStripeFixed();
            const msiFee = totalToCharge * MSI_FEES[months];
            const totalCommissionBeforeIVA = stripeBaseFee + msiFee;
            const ivaOnCommission = totalCommissionBeforeIVA * IVA;
            const totalFee = totalCommissionBeforeIVA + ivaOnCommission;

            totalToChargeP.textContent = formatCurrency(totalToCharge);
            if (months > 0) {
                const monthly = totalToCharge / months;
                installmentsToChargeP.textContent = `Mensualidad estimada del cliente: ${formatCurrency(monthly)} x ${months} meses`;
            } else {
                installmentsToChargeP.textContent = '';
            }
            stripeFeeToChargeP.textContent = `Comisión Stripe: ${formatCurrency(stripeBaseFee + (stripeBaseFee * IVA))}`;
            msiFeeToChargeP.textContent = `Comisión MSI: ${formatCurrency(msiFee + (msiFee * IVA))}`;
            totalFeeToChargeP.textContent = `Comisión Total (IVA incl.): ${formatCurrency(totalFee)}`;
            resultToChargeDiv.classList.remove('hidden');
        }

        function calculateTotalToCharge() {
            const desiredAmount = parseFloat(desiredAmountInput.value) || 0;
            const months = parseInt(monthsToChargeSelect.value);

            if (desiredAmount <= 0) {
                resultToChargeDiv.classList.add('hidden');
                return;
            }

            // Fórmula para el cálculo inverso:
            // TotalACobrar = (MontoDeseado + (ComisionFija * (1 + IVA))) / (1 - ((ComisionStripe% + ComisionMSI%) * (1 + IVA)))
            
            const fixedFeeWithIVA = getStripeFixed() * (1 + IVA);
            const totalPercentageFee = getStripePct() + MSI_FEES[months];
            const percentageFeeWithIVA = totalPercentageFee * (1 + IVA);
            
            const totalToCharge = (desiredAmount + fixedFeeWithIVA) / (1 - percentageFeeWithIVA);

            if (totalToCharge < 0 || !isFinite(totalToCharge)) {
                 resultToChargeDiv.classList.add('hidden');
                return;
            }
            lastChargeTotal = totalToCharge; // guardar original
            roundedBadge?.classList.add('hidden');
            renderChargeFromTotal(totalToCharge, months);
        }

        // --- EVENT LISTENERS ---
        totalAmountInput.addEventListener('input', (e) => {
            if (parseFloat(e.target.value) < 0) e.target.value = '0';
            calculateNetToReceive();
        });
        monthsToReceiveSelect.addEventListener('change', calculateNetToReceive);

        desiredAmountInput.addEventListener('input', (e) => {
            if (parseFloat(e.target.value) < 0) e.target.value = '0';
            calculateTotalToCharge();
        });
        monthsToChargeSelect.addEventListener('change', calculateTotalToCharge);

        // Rounding action on charge result
        roundChargeBtn?.addEventListener('click', ()=>{
            const months = parseInt(monthsToChargeSelect.value);
            // Si hay un total ya calculado, úsalo; si no, intenta calcular primero
            if (lastChargeTotal == null) {
                calculateTotalToCharge();
            }
            const base = lastChargeTotal;
            if (!isFinite(base) || base <= 0) return;
            const rounded = Math.ceil(base);
            roundedBadge?.classList.remove('hidden');
            renderChargeFromTotal(rounded, months);
        });

        // Advanced controls listeners
        advStripePctInput?.addEventListener('input', ()=>{ calculateNetToReceive(); calculateTotalToCharge(); });
        advStripeFixedInput?.addEventListener('input', ()=>{ calculateNetToReceive(); calculateTotalToCharge(); });

        // --- ACCESO (CLIENTE) SIMPLE: SOLO DISUASIVO, NO ES SEGURIDAD REAL ---
        document.addEventListener('DOMContentLoaded', () => {
            const overlay = document.getElementById('auth-overlay');
            const passInput = document.getElementById('auth-pass');
            const btn = document.getElementById('auth-btn');
            const err = document.getElementById('auth-error');

            // Si ya se autenticó en esta sesión, no mostrar
            if (sessionStorage.getItem('calc_auth') === 'ok') return;

            overlay.classList.remove('hidden');
            passInput.focus();

            const PASSWORD = 'sr2025!'; // CAMBIA ESTA CLAVE

            function tryLogin() {
                const val = passInput.value || '';
                if (val === PASSWORD) {
                    sessionStorage.setItem('calc_auth', 'ok');
                    overlay.classList.add('hidden');
                    err.classList.add('hidden');
                } else {
                    err.classList.remove('hidden');
                }
            }

            btn.addEventListener('click', tryLogin);
            passInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') tryLogin();
            });
        });

        // --- PANEL AVANZADO: ACCESO OCULTO ---
        document.addEventListener('DOMContentLoaded', () => {
            const advPanel = document.getElementById('advanced-panel');
            const title = document.getElementById('page-title');
            const advToggle = document.getElementById('adv-toggle');
            const advIcon = document.getElementById('adv-icon');

            if (!advPanel) return;

            function isAdvVisible(){ return !advPanel.classList.contains('hidden'); }
            function setAdvVisible(v){
                advPanel.classList.toggle('hidden', !v);
                try { sessionStorage.setItem('adv_visible', v ? '1' : '0'); } catch {}
                refreshToggleLabel();
            }
            function refreshToggleLabel(){
                if (!advToggle) return;
                const visible = isAdvVisible();
                advToggle.setAttribute('aria-pressed', visible ? 'true' : 'false');
                advToggle.setAttribute('aria-expanded', visible ? 'true' : 'false');
                if (advIcon) advIcon.classList.toggle('rotate-180', visible);
                const span = advToggle.querySelector('span');
                if (span) span.textContent = visible ? 'Ocultar avanzado' : 'Panel avanzado';
            }

            // Inicializar desde sessionStorage o query ?adv=1
            try {
                const params = new URLSearchParams(window.location.search);
                const fromSession = sessionStorage.getItem('adv_visible') === '1';
                const fromQuery = params.get('adv') === '1';
                if (fromSession || fromQuery) setAdvVisible(true);
            } catch {}
            // Ajustar etiqueta inicial
            refreshToggleLabel();

            // Tecla: Shift + A para alternar
            document.addEventListener('keydown', (e) => {
                if (e.shiftKey && (e.key === 'A' || e.key === 'a')) {
                    setAdvVisible(!isAdvVisible());
                }
            });

            // 5 clics rápidos en el título para alternar (en ~1.2s)
            let clicks = 0; let timer = null;
            title?.addEventListener('click', () => {
                clicks++;
                if (clicks >= 5) {
                    setAdvVisible(!isAdvVisible());
                    clicks = 0;
                    if (timer) { clearTimeout(timer); timer = null; }
                } else if (!timer) {
                    timer = setTimeout(() => { clicks = 0; timer = null; }, 1200);
                }
            });

            // Botón visible para alternar
            advToggle?.addEventListener('click', () => {
                setAdvVisible(!isAdvVisible());
            });
        });

    </script>
</body>
</html>
